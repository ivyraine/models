version: 2.1


variables:
  defaults: &defaults
    machine: # executor type
      image: ubuntu-2004:current
    resource_class: medium
    working_directory: ~/repo
    environment:
      GIT_LFS_SKIP_SMUDGE: "1"
  install_conda: &install_conda
    run:
      name: Install miniconda3
      command: |
        sudo apt-get update && sudo apt-get install -y build-essential libz-dev libcurl3-dev libarchive-dev gcc && \
        wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh && \
        /usr/bin/bash ~/miniconda.sh -b && \
        rm ~/miniconda.sh && \
        ~/miniconda3/bin/conda clean -tipy && \
        sudo ln -s ~/miniconda3/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
        echo ". ~/miniconda3/etc/profile.d/conda.sh" >> $BASH_ENV && \
        echo "conda activate base" >> $BASH_ENV
  update_conda: &update_conda
    run:
      name: Update conda
      command: conda update -n base conda
  install_mamba_solver: &install_mamba_solver
    run:
      name: Install mamba solver (experimental)
      command: conda install -n base conda-libmamba-solver
  install_sys_deps: &install_sys_deps
    run:
      name: install build-essential
      command: apt-get update --allow-releaseinfo-change && apt-get install -y build-essential libz-dev libcurl3-dev curl
  install_gitlfs: &install_gitlfs
    run:
      name: Install git-lfs
      command: conda install --yes -c conda-forge git-lfs && git lfs install
  install_singularity: &install_singularity
    run:
      name: Install Singularity
      command: |
        conda install --yes -c conda-forge singularity
  install_apptainer: &install_apptainer
    run:
      name: Install Apptainer from source
      command: |
        echo 'export CI_JOB_PY_YAML="$CI_JOB_PY_YAML"' >> $BASH_ENV
        sudo apt-get -q update && sudo apt-get install -y build-essential squashfs-tools libseccomp-dev cryptsetup libhdf5-serial-dev pkg-config
        wget https://github.com/apptainer/apptainer/releases/download/v1.0.2/apptainer_1.0.2_amd64.deb 
        sudo apt install ~/repo/apptainer_1.0.2_amd64.deb
        apptainer --version    
  restore_cache: &restore_cache
    restore_cache:
      keys:
        - source-v2-{{ .Branch }}-{{ .Revision }}
        - source-v2-{{ .Branch }}-
        - source-v2-master-
        - source-v2-
  setup: &setup
    run: 
      name: Setup Kipoi
      command: .circleci/setup.sh
  store_artifacts: &store_artifacts
    store_artifacts:
      path: test-reports
      destination: test-reports
  sync: &sync
    run:
      name: Sync kipoi models and containers repo
      command: curl -X POST -H "Accept:application/vnd.github.v3+json" -H "Authorization:token $SYNC_TOKEN" https://api.github.com/repos/kipoi/kipoi-containers/dispatches -d '{"event_type":"sync"}'

jobs:
  sync_containers:
    <<: *defaults
    steps:
      - *install_conda  
      - *sync

  # test only the newly added model
  test_new_models:
    <<: *defaults
    steps:
      - checkout
      - *install_conda
      - *update_conda   
      - *install_mamba_solver
      # - *install_sys_deps
      - *install_gitlfs
      # - *restore_cache
      - *setup
      - run:
          name: run tests
          command: kipoi test-source kipoi --git-range master HEAD --verbose
      - *store_artifacts
    
  # test only the newly added model with singularity
  test_new_models_singularity:
    <<: *defaults
    steps:
      - checkout
      - *install_apptainer
      - *install_conda
      - *update_conda   
      - *install_mamba_solver
      # - *install_sys_deps
      - *install_gitlfs
      # - *restore_cache
      - *setup
      - run:
          name: run tests
          command: kipoi test-source kipoi --git-range master HEAD --verbose --singularity
      - *store_artifacts
  
  # test all models in the repo
  test_all_models:
    parameters:
      num_of_shards: 
        type: integer
      shard_id:
        type: integer 
    <<: *defaults
    steps:
      - checkout
      - *install_conda 
      - *update_conda
      - *install_mamba_solver
      # - *install_sys_deps
      - *install_gitlfs
      # - *restore_cache
      - *setup
      - run:
          name: run tests
          # Use  --clean_env to remove the environment of each model
          no_output_timeout: 60m
          command: kipoi test-source kipoi --all --num_of_shards << parameters.num_of_shards >> --shard_id << parameters.shard_id >>
      - *store_artifacts

  # test all models in the repo
  test_all_models_singularity:
    parameters:
      num_of_shards: 
        type: integer
      shard_id:
        type: integer 
    <<: *defaults
    steps:
      - checkout
      - *install_apptainer
      - *install_conda
      - *update_conda   
      - *install_mamba_solver
      # - *install_sys_deps
      - *install_gitlfs
      # - *restore_cache
      - *setup
      - run:
          name: run tests
          # Use  --clean_env to remove the environment of each model
          no_output_timeout: 60m
          command: kipoi test-source kipoi --all --num_of_shards << parameters.num_of_shards >> --shard_id << parameters.shard_id >> --singularity
      - *store_artifacts


  test_all_models_common_env:
    parameters:
      num_of_shards: 
        type: integer
      shard_id:
        type: integer 
    <<: *defaults
    steps:
      - checkout
      - *install_conda 
      - *update_conda  
      - *install_mamba_solver
      # - *install_sys_deps
      - *install_gitlfs
      # - *restore_cache
      - *setup
      - run:
          name: run tests in common environments
          no_output_timeout: 60m
          command: kipoi test-source kipoi --all --common_env --num_of_shards << parameters.num_of_shards >> --shard_id << parameters.shard_id >>
      - *store_artifacts

  date_release:
    <<: *defaults
    steps:
      - run:
          name: Tag and push
          command: |
            VERSION=$(date "+%Y-%m-%d")
            API_JSON=$(printf '{"tag_name": "v%s","target_commitish": "master","name": "v%s","body": "Release of version %s","draft": false,"prerelease": false}' $VERSION $VERSION $VERSION)
            curl --data "$API_JSON" https://api.github.com/repos/kipoi/models/releases?access_token=$GITHUB_TOKEN


workflows:
  version: 2.1

  # workflow for testing pushes and PRs
  test-models:
     jobs:
       - test_new_models:
           filters:
             branches:
               ignore:
                 - master
                 - test_all
       - test_new_models_singularity:
           filters:
             branches:
               ignore:
                 - master
                 - test_all
                      
  test-all-branch:
     jobs:
       - test_all_models:
           matrix:
             parameters:
               num_of_shards: [8]
               shard_id: [0, 1, 2, 3, 4, 5, 6, 7]
           filters:
             branches:
               only:
                 - master
                 - test_all
       - test_all_models_singularity:
           matrix:
             parameters:
               num_of_shards: [12]
               shard_id: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
           filters:
             branches:
               only:
                 - master
                 - test_all
       - test_all_models_common_env:
           matrix:
             parameters:
               num_of_shards: [4]
               shard_id: [0, 1, 2, 3]
           filters:
             branches:
               only:
                 - master
                 - test_all
       - sync_containers:
           context:
             - sync-kipoi-containers
           requires:
             - test_all_models
             - test_all_models_common_env
           filters:
             branches:
               only:
                 - master
                 - test_all
          

  # workflow for testing all the models
  # on the master branch overnight
  kipoi-nightly-test:
     triggers:
       - schedule:
           cron: "0 0 * * *"
           filters:
             branches:
               only:
                 - master
     jobs:
       - test_all_models:
          matrix:
            parameters:
              num_of_shards: [8]
              shard_id: [0, 1, 2, 3, 4, 5, 6, 7]
       - test_all_models_singularity:
          matrix:
            parameters:
              num_of_shards: [12]
              shard_id: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
       - test_all_models_common_env:
          matrix:
            parameters:
              num_of_shards: [4]
              shard_id: [0, 1, 2, 3]


  weekly-tag:
     triggers:
       - schedule:
           cron: "0 0 * * 0"
           filters:
             branches:
               only:
                 - master
     jobs:
       - date_release
